debug_mode: 1
method: $(arg method) # method that is running
nrobots: $(arg nrobots)    # number of robots on the team
nareas: $(arg nareas) #number of areas to preserve
placement: $(arg placement) #placement of areas
dec_steps: $(arg dsteps) #number of decision steps
t_operation: $(arg tframe) #total duration of the operation
file_sampled_areas: $(arg fileposes) #file name of sampled areas
file_data_dump: $(arg fileresult) #file name for data dump
inference: $(arg inference) #type of heuristic for inference on decay param
save: $(arg save) #save data

gamma: 0.25 #discount factor for future losses/rewards: [0, 1]. If gamma=0, present looking. Else if gamma=1, all future rewards are treated equally with present reward
robot_velocity: 1.0 #Linear velocity of robot; we assume linear and angular are relatively equal
max_fmeasure: 100 # Max F-measure of an area
max_battery: 100 #Max battery, 100
battery_reserve: 20 #battery reserve
f_thresh: [80, 50] #(safe, crit)
batt_consumed_per_time: [0.10, 0.10] #(travel, restoration)
restoration: 25 #F-measure/battery.py units per second restored
noise: 0.25 #noise/error in navigation and restoration
move_base_tolerance: 0.5

#Uncertainty params
alpha: 0.05 #alpha-quantile for heuristics that measure some expected value of a distribution
win_size: 3 #window size for the time-series forecast

#Reinforcement learning params
exploration: 0.4 #tunable exploration parameter
